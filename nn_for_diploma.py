# -*- coding: utf-8 -*-
"""NN for diploma.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LnNJOuuHg0eOkJn0TxMxRdii5sul8igI

## Libraries and GDrive
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow.keras.layers import Dropout
from tensorflow.keras.models import Sequential
from tensorflow.keras import utils
from tensorflow.keras.layers import Input
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
# %matplotlib inline

from pandas import read_csv, DataFrame
import statsmodels.api as sm
from statsmodels.iolib.table import SimpleTable
from sklearn.metrics import r2_score

"""## Data loading"""

def load_input():
  gost_40_str = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/40_gost_str.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  gost_40_crv3 = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/40_gost_crv3.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  gost_40_crv6 = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/40_gost_crv6.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  greb_40_str = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/40_greb_str.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  greb_40_crv3 = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/40_greb_crv3.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  greb_40_crv6 = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/40_greb_crv6.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  polzun05_40_str = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/40_plz05_str.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  polzun05_40_crv3 = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/40_plz05_crv3.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  polzun05_40_crv6 = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/40_plz05_crv6.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  polzun12_40_str = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/40_plz12_str.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  polzun12_40_crv3 = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/40_plz12_crv3.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  polzun12_40_crv6 = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/40_plz12_crv6.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  return gost_40_str, gost_40_crv3, gost_40_crv6, greb_40_str, greb_40_crv3, greb_40_crv6,polzun05_40_str,polzun05_40_crv3,polzun05_40_crv6,polzun12_40_str,polzun12_40_crv3,polzun12_40_crv6

def load_target():
  gost_str = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_gost_str.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  gost_crv3 = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_gost_crv3.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  gost_crv6 = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_gost_crv6.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  greb_str = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_greb_str.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  greb_crv3 = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_greb_crv3.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  greb_crv6 = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_greb_crv6.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  polzun05_str = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_plz05_str.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  polzun05_crv3 = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_plz05_crv3.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  polzun05_crv6 = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_plz05_crv6.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  polzun12_str = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_plz12_str.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  polzun12_crv3 = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_plz12_crv3.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  polzun12_crv6 = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_plz12_crv6.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  return gost_str, gost_crv3, gost_crv6, greb_str, greb_crv3, greb_crv6,polzun05_str,polzun05_crv3,polzun05_crv6,polzun12_str,polzun12_crv3,polzun12_crv6

def load_test():
  gost_str_test = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_gost_strl.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  gost_crv3_test = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_gost_crv3l.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  gost_crv6_test = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_gost_crv6l.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  greb_str_test = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_greb_strl.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  greb_crv3_test = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_greb_crv3l.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  greb_crv6_test = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_greb_crv6l.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  polzun05_str_test = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_plz05_strl.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  polzun05_crv3_test = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_plz05_crv3l.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  polzun05_crv6_test = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_plz05_crv6l.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  polzun12_str_test = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_plz12_strl.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  polzun12_crv3_test = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_plz12_crv3l.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  polzun12_crv6_test = pd.read_csv('/content/drive/MyDrive/Diplom/realtest/60_plz12_crv6l.csv',names=['time','verticalforce', 'horizontalforce'],index_col='time', encoding='latin-1')
  return gost_str_test, gost_crv3_test, gost_crv6_test, greb_str_test, greb_crv3_test, greb_crv6_test,polzun05_str_test,polzun05_crv3_test,polzun05_crv6_test,polzun12_str_test,polzun12_crv3_test,polzun12_crv6_test

gost_40_str, gost_40_crv3, gost_40_crv6, greb_40_str, greb_40_crv3, greb_40_crv6,polzun05_40_str,polzun05_40_crv3,polzun05_40_crv6,polzun12_40_str,polzun12_40_crv3,polzun12_40_crv6 = load_input()

gost_str, gost_crv3, gost_crv6, greben_str, greben_crv3, greben_crv6,polzun05_str,polzun05_crv3,polzun05_crv6,polzun12_str,polzun12_crv3,polzun12_crv6 = load_target()

gost_str_test, gost_crv3_test, gost_crv6_test, greb_str_test, greb_crv3_test, greb_crv6_test,polzun05_str_test,polzun05_crv3_test,polzun05_crv6_test,polzun12_str_test,polzun12_crv3_test,polzun12_crv6_test = load_test()

#Надо объеденить фреймы в одно
def df (x1,x2,x3):
   x = pd.concat([x1,x2,x3], axis=1)
   return x

gost_df_input = df(gost_40_str,gost_40_crv3,gost_40_crv6)

greb_df_input = df(greb_40_str, greb_40_crv3, greb_40_crv6)

polzun05_df_input = df(polzun05_40_str,polzun05_40_crv3,polzun05_40_crv6)

polzun12_df_input = df(polzun12_40_str,polzun12_40_crv3,polzun12_40_crv6)

gost_df_target = df(gost_str, gost_crv3, gost_crv6)

greb_df_target = df(greben_str, greben_crv3, greben_crv6)

polzun05_df_target = df(polzun05_str,polzun05_crv3,polzun05_crv6)

polzun12_df_target = df(polzun12_str,polzun12_crv3,polzun12_crv6)

gost_test = df(gost_str_test, gost_crv3_test, gost_crv6_test)

greb_test = df(greb_str_test, greb_crv3_test, greb_crv6_test)

polzun05_test = df(polzun05_str_test,polzun05_crv3_test,polzun05_crv6_test)

polzun12_test = df(polzun12_str_test,polzun12_crv3_test,polzun12_crv6_test)

"""## Making features"""

def desperssion(x1,x2,x3,x4):

  #Дисперсия

  y1 = pd.DataFrame.var(x1,ddof=500, axis=0)
  y2 = pd.DataFrame.var(x1,ddof=1000, axis=0)
  y3 = pd.DataFrame.var(x1,ddof=1500, axis=0)
  y4 = pd.DataFrame.var(x1,ddof=2000, axis=0)
  y5 = pd.DataFrame.var(x1,ddof=2500, axis=0)
  y6 = pd.DataFrame.var(x1,ddof=3000, axis=0)
  y7 = pd.DataFrame.var(x1,ddof=3500, axis=0)
  y8 = pd.DataFrame.var(x1,ddof=4000, axis=0)
  y9 = pd.DataFrame.var(x1,ddof=4500, axis=0)
  y10 = pd.DataFrame.var(x1,ddof=5000, axis=0)
  y11 = pd.DataFrame.var(x1,ddof=5500, axis=0)
  y12 = pd.DataFrame.var(x1,ddof=6000, axis=0)

  z1 = pd.DataFrame.var(x2,ddof=500, axis=0)
  z2 = pd.DataFrame.var(x2,ddof=1000, axis=0)
  z3 = pd.DataFrame.var(x2,ddof=1500, axis=0)
  z4 = pd.DataFrame.var(x2,ddof=2000, axis=0)
  z5 = pd.DataFrame.var(x2,ddof=2500, axis=0)
  z6 = pd.DataFrame.var(x2,ddof=3000, axis=0)
  z7 = pd.DataFrame.var(x2,ddof=3500, axis=0)
  z8 = pd.DataFrame.var(x2,ddof=4000, axis=0)
  z9 = pd.DataFrame.var(x2,ddof=4500, axis=0)
  z10 = pd.DataFrame.var(x2,ddof=5000, axis=0)
  z11 = pd.DataFrame.var(x2,ddof=5500, axis=0)
  z12 = pd.DataFrame.var(x2,ddof=6000, axis=0)

  f1 = pd.DataFrame.var(x3,ddof=500, axis=0)
  f2 = pd.DataFrame.var(x3,ddof=1000, axis=0)
  f3 = pd.DataFrame.var(x3,ddof=1500, axis=0)
  f4 = pd.DataFrame.var(x3,ddof=2000, axis=0)
  f5 = pd.DataFrame.var(x3,ddof=2500, axis=0)
  f6 = pd.DataFrame.var(x3,ddof=3000, axis=0)
  f7 = pd.DataFrame.var(x3,ddof=3500, axis=0)
  f8 = pd.DataFrame.var(x3,ddof=4000, axis=0)
  f9 = pd.DataFrame.var(x3,ddof=4500, axis=0)
  f10 = pd.DataFrame.var(x3,ddof=5000, axis=0)
  f11 = pd.DataFrame.var(x3,ddof=5500, axis=0)
  f12 = pd.DataFrame.var(x3,ddof=6000, axis=0)

  w1 = pd.DataFrame.var(x4,ddof=500, axis=0)
  w2 = pd.DataFrame.var(x4,ddof=1000, axis=0)
  w3 = pd.DataFrame.var(x4,ddof=1500, axis=0)
  w4 = pd.DataFrame.var(x4,ddof=2000, axis=0)
  w5 = pd.DataFrame.var(x4,ddof=2500, axis=0)
  w6 = pd.DataFrame.var(x4,ddof=3000, axis=0)
  w7 = pd.DataFrame.var(x4,ddof=3500, axis=0)
  w8 = pd.DataFrame.var(x4,ddof=4000, axis=0)
  w9 = pd.DataFrame.var(x4,ddof=4500, axis=0)
  w10 = pd.DataFrame.var(x4,ddof=5000, axis=0)
  w11 = pd.DataFrame.var(x4,ddof=5500, axis=0)
  w12 = pd.DataFrame.var(x4,ddof=6000, axis=0)
  # массивы (1,6)

  zz1 = y1.to_numpy()
  zz2 = y2.to_numpy()
  zz3 = y3.to_numpy()
  zz4 = y4.to_numpy()
  zz5 = y5.to_numpy()
  zz6 = y6.to_numpy()
  zz7 = y7.to_numpy()
  zz8 = y8.to_numpy()
  zz9 = y9.to_numpy()
  zz10 = y10.to_numpy()
  zz11 = y11.to_numpy()
  zz12 = y12.to_numpy()
  
  zzz1 = z1.to_numpy()
  zzz2 = z2.to_numpy()
  zzz3 = z3.to_numpy()
  zzz4 = z4.to_numpy()
  zzz5 = z5.to_numpy()
  zzz6 = z6.to_numpy()
  zzz7 = z7.to_numpy()
  zzz8 = z8.to_numpy()
  zzz9 = z9.to_numpy()
  zzz10 = z10.to_numpy()
  zzz11 = z11.to_numpy()
  zzz12 = z12.to_numpy()

  yy1 = w1.to_numpy()
  yy2 = w2.to_numpy()
  yy3 = w3.to_numpy()
  yy4 = w4.to_numpy()
  yy5 = w5.to_numpy()
  yy6 = w6.to_numpy()
  yy7 = w7.to_numpy()
  yy8 = w8.to_numpy()
  yy9 = w9.to_numpy()
  yy10 = w10.to_numpy()
  yy11 = w11.to_numpy()
  yy12 = w12.to_numpy()

  yyy1 = f1.to_numpy()
  yyy2 = f2.to_numpy()
  yyy3 = f3.to_numpy()
  yyy4 = f4.to_numpy()
  yyy5 = f5.to_numpy()
  yyy6 = f6.to_numpy()
  yyy7 = f7.to_numpy()
  yyy8 = f8.to_numpy()
  yyy9 = f9.to_numpy()
  yyy10 = f10.to_numpy()
  yyy11 = f11.to_numpy()
  yyy12 = f12.to_numpy()

#Датафреймы размером (1,6) 12 штук на каждую неисправность

  df1 = pd.DataFrame(zz1)
  df2 = pd.DataFrame(zz2)
  df3 = pd.DataFrame(zz3)
  df4 = pd.DataFrame(zz4)
  df5 = pd.DataFrame(zz5)
  df6 = pd.DataFrame(zz6)
  df7 = pd.DataFrame(zz7)
  df8 = pd.DataFrame(zz8)
  df9 = pd.DataFrame(zz9)
  df10 = pd.DataFrame(zz10)
  df11 = pd.DataFrame(zz11)
  df12 = pd.DataFrame(zz12)

  dff1 = pd.DataFrame(zzz1)
  dff2 = pd.DataFrame(zzz2)
  dff3 = pd.DataFrame(zzz3)
  dff4 = pd.DataFrame(zzz4)
  dff5 = pd.DataFrame(zzz5)
  dff6 = pd.DataFrame(zzz6)
  dff7 = pd.DataFrame(zzz7)
  dff8 = pd.DataFrame(zzz8)
  dff9 = pd.DataFrame(zzz9)
  dff10 = pd.DataFrame(zzz10)
  dff11 = pd.DataFrame(zzz11)
  dff12 = pd.DataFrame(zzz12)  

  d1 = pd.DataFrame(yy1)
  d2 = pd.DataFrame(yy2)
  d3 = pd.DataFrame(yy3)
  d4 = pd.DataFrame(yy4)
  d5 = pd.DataFrame(yy5)
  d6 = pd.DataFrame(yy6)
  d7 = pd.DataFrame(yy7)
  d8 = pd.DataFrame(yy8)
  d9 = pd.DataFrame(yy9)
  d10 = pd.DataFrame(yy10)
  d11 = pd.DataFrame(yy11)
  d12 = pd.DataFrame(yy12)

  dd1 = pd.DataFrame(yyy1)
  dd2 = pd.DataFrame(yyy2)
  dd3 = pd.DataFrame(yyy3)
  dd4 = pd.DataFrame(yyy4)
  dd5 = pd.DataFrame(yyy5)
  dd6 = pd.DataFrame(yyy6)
  dd7 = pd.DataFrame(yyy7)
  dd8 = pd.DataFrame(yyy8)
  dd9 = pd.DataFrame(yyy9)
  dd10 = pd.DataFrame(yyy10)
  dd11 = pd.DataFrame(yyy11)
  dd12 = pd.DataFrame(yyy12)

  #датафрейм из 12 по (1,6) в 1  размером (6,12), где строки это дисперсия вертикальных и горизонтальных сил с шагом в 500 элементов

  df = pd.concat([df1,df2,df3,df4,df5,df6,df7,df8,df9,df10,df11,df12], axis=1) # фрейм (6,12)


  dff = pd.concat([dff1,dff2,dff3,dff4,dff5,dff6,dff7,dff8,dff9,dff10,dff11,dff12], axis=1) # фрейм (6,12)


  ddf = pd.concat([d1,d2,d3,d4,d5,d6,d7,d8,d9,d10,d11,d12], axis=1) # фрейм (6,12)


  dd = pd.concat([dd1,dd2,dd3,dd4,dd5,dd6,dd7,dd8,dd9,dd10,dd11,dd12], axis=1) # фрейм (6,12)


  return df,dff,ddf,dd

gost_df_inp, greb_df_inp, plz05_df_inp, plz12_df_inp = desperssion(gost_df_input,greb_df_input,polzun05_df_input,polzun12_df_input)

gost_df_inp.shape

gost_df_tr, greb_df_tr, plz05_df_tr, plz12_df_tr = desperssion(gost_df_target, greb_df_target, polzun05_df_target,polzun12_df_target)

gost_df_ts, greb_df_ts, plz05_df_ts, plz12_df_ts = desperssion(gost_test, greb_test, polzun05_test,polzun12_test)

"""## Features in dsets"""

inputs = pd.concat([gost_df_inp, greb_df_inp, plz05_df_inp, plz12_df_inp], axis='index') # (24, 12) 6 гостов, 6 гребней, 6 ползунов 0,5, 6 ползунов 1,2
trainings = pd.concat([gost_df_tr, greb_df_tr, plz05_df_tr, plz12_df_tr], axis='index') # (24, 12) 6 гостов, 6 гребней, 6 ползунов 0,5, 6 ползунов 1,2
tests = pd.concat([gost_df_ts, greb_df_ts, plz05_df_ts, plz12_df_ts], axis='index') # (24, 12) 6 гостов, 6 гребней, 6 ползунов 0,5, 6 ползунов 1,2

def insert_goal(data):
  data.insert(loc=len(data.columns),column='name',value=['gost','gost','gost','greben','greben','greben',
  'polzun05','polzun05','polzun05','polzun12','polzun12','polzun12','gost','gost','gost','greben','greben','greben',
  'polzun05','polzun05','polzun05','polzun12','polzun12','polzun12'])
  return data

inputs.head(10)

inputs = insert_goal(inputs)

trainings = insert_goal(trainings)

tests = insert_goal(tests)

tests.head(10)

input = pd.concat([inputs, trainings],axis=0)

input.shape

def name_axis(data):
  frame = data.set_axis(['straight', 'curve 350', 'curve650', 'straight', 'curve 350', 'curve 650', 'straight',
                         'curve 350', 'curve 650', 'straight', 'curve 350', 'curve 650','name'], axis='columns')
  return frame

X = name_axis(input)

X.head(10)

X = X.reset_index()
X = X.drop(['index'],axis=1)

y = X.iloc[:,len(X.columns) - 1]

y = pd.DataFrame(y)

y = y.reset_index()

y = y.drop(['index'],axis=1)

y

y.shape

X_train,X_test,y_train,y_test = train_test_split(X,y, test_size=0.2, shuffle=True)

"""## Prepared X and y for training"""

X_train.shape,X_test.shape,y_train.shape,y_test.shape

X_train = X_train.drop(['name'], axis='columns')
X_test = X_test.drop(['name'], axis='columns')



y_train.shape

"""## Preparing test data"""

tests.head()

validation = name_axis(tests)

validation.head()

X_val = validation.iloc[:,:len(validation.columns) - 1]
X_val.shape

y_val = validation.iloc[:,len(validation.columns) - 1]

y_val = pd.DataFrame(y_val)

"""## Normalizer"""

from sklearn.preprocessing import Normalizer
X_train = Normalizer().fit_transform(X_train)
X_test = Normalizer().fit_transform(X_test)
X_val = Normalizer().fit_transform(X_val)

from sklearn.preprocessing import LabelBinarizer
y_train = LabelBinarizer().fit_transform(y_train)
y_test = LabelBinarizer().fit_transform(y_test)
y_val = LabelBinarizer().fit_transform(y_val)

y_train

"""## Arquitecture"""

X_train.shape[1]

model = Sequential()
model.add(Input(12))
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(500, activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(500, activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(4, activation='softmax'))

model.compile(optimizer = 'adam',
            loss = 'categorical_crossentropy',
            metrics=['accuracy'])

result = model.fit(X_train,y_train, validation_data=(X_val,y_val), shuffle=True, batch_size=32, epochs=200)

plt.figure(figsize=(12,6))
plt.plot(result.history['accuracy'], label='accuracy')
plt.plot(result.history['loss'], label = 'loss')
plt.plot(result.history['val_accuracy'], label='val_accuracy')
plt.plot(result.history['val_loss'], label = 'val_loss')
plt.legend()
plt.title('График тренировочного обучения')
plt.show()

